import { validate } from 'class-validator';
import { Project } from './project.entity';

describe('Project Entity', () => {
  // Helper function to create a valid project
  function createValidProject(): Project {
    const project = new Project();
    // Skip ID validation as it's generated by the database
    Object.defineProperty(project, 'id', { 
      value: '123e4567-e89b-12d3-a456-426614174000',
      writable: true,
      enumerable: true
    });
    project.userId = 'user123';
    project.name = 'Test Project';
    return project;
  }

  it('should validate a valid project', async () => {
    const project = createValidProject();
    project.description = 'This is a valid description';
    
    const errors = await validate(project, { skipMissingProperties: true });
    expect(errors.length).toBe(0);
  });

  it('should validate a project without description', async () => {
    const project = createValidProject();
    
    const errors = await validate(project, { skipMissingProperties: true });
    expect(errors.length).toBe(0);
  });

  it('should fail validation with empty name', async () => {
    const project = createValidProject();
    project.name = '';
    
    const errors = await validate(project, { skipMissingProperties: true });
    expect(errors.length).toBeGreaterThan(0);
    expect(errors[0].constraints).toHaveProperty('isNotEmpty');
  });

  it('should fail validation with too long name', async () => {
    const project = createValidProject();
    project.name = 'a'.repeat(101);
    
    const errors = await validate(project, { skipMissingProperties: true });
    expect(errors.length).toBeGreaterThan(0);
    expect(errors[0].constraints).toHaveProperty('maxLength');
  });

  it('should fail validation with too long description', async () => {
    const project = createValidProject();
    project.description = 'a'.repeat(1001);
    
    const errors = await validate(project, { skipMissingProperties: true });
    expect(errors.length).toBeGreaterThan(0);
    expect(errors[0].constraints).toHaveProperty('maxLength');
  });

  it('should fail validation with HTML tags in description', async () => {
    const project = createValidProject();
    project.description = '<script>alert("XSS")</script>';
    
    const errors = await validate(project, { skipMissingProperties: true });
    expect(errors.length).toBeGreaterThan(0);
    expect(errors[0].constraints).toHaveProperty('matches');
  });
});